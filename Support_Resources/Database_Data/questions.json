[{
  "_id": {
    "$oid": "6388abc1e425877b82ce0cff"
  },
  "questionid": "1",
  "difficulty": "Medium",
  "description": "<p>Given the array <code>prices</code> where <code>prices[i]</code> is the price of the <code>ith</code> item in a shop. There is a special discount for items in the shop, if you buy the <code>ith</code> item, then you will receive a discount equivalent to <code>prices[j]</code> where <code>j</code> is the <strong>minimum</strong>&nbsp;index such that <code>j &gt; i</code> and <code>prices[j] &lt;= prices[i]</code>, otherwise, you will not receive any discount at all.</p><p><em>Return an array where the <code>ith</code> element is the final price you will pay for the <code>ith</code> item of the shop considering the special discount.</em></p><p>&nbsp;</p><strong></br><hr>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separated values  like <strong><br > 4 <br> 1 6 8 4</strong> <br></p><p><strong><br><hr>Example 1:</strong></p><strong><br>Input:</strong> prices = [8,4,6,2,3]<strong><br>Output:</strong> [4,2,4,2,3]<strong><br>Explanation:</strong>&nbsp;For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.&nbsp;For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.&nbsp;For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.&nbsp;For items 3 and 4 you will not receive any discount at all.<p><strong><br><hr>Example 2:</strong></p><strong><br>Input:</strong> prices = [1,2,3,4,5]<strong><br>Output:</strong> [1,2,3,4,5]<strong><br>Explanation:</strong> In this case, for all items, you will not receive any discount at all.<p><strong><br><hr>Example 3:</strong></p><strong><br>Input:</strong> prices = [10,1,1,6]<strong><br>Output:</strong> [9,0,1,6]<p>&nbsp;</p><p><strong><br><hr>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 500</code></li><li><code>1 &lt;= prices[i] &lt;= 10^3</code></li></ul>",
  "wrongcodefile": "1wrongcode.cpp",
  "rightcodefile": "1rightcode.cpp",
  "wrongcode": "\n#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> finalPrices(vector<int>& p) {\n        int n=p.size();\n        stack<int> s;\n        vector<int>d (n,-1);\n        for(int i=0;i<p.size();i++){\n            if(s.size()==0){\n                s.push(i);\n            }\n            else{\n                if(p[s.top()]>p[i]){\n                    while(!s.empty()&&p[s.top()]>=p[i]){\n                         d[s.top()]=i;\n                        s.pop();\n                    }\n                }\n                s.push(i);\n            }\n        }\n        vector<int>v;\n        for(int i=0;i<n;i++){\n            if(d[i]!=-1){\n                v.push_back(p[i]-p[d[i]]);\n            }\n            else{\n                v.push_back(p[i]);\n            }\n        }\n        return v;\n    }\n};\n\nint main(){\n    vector<int>v;\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        int t;\n        cin>>t;\n        v.push_back(t);\n    }\n    Solution ob;\n    vector<int>ans=ob.finalPrices(v);\n    for(int i=0;i < ans.size();i++){\n        cout<<ans[i]<<\" \";\n    }\n    return 0;\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d00"
  },
  "questionid": "2",
  "difficulty": "Medium",
  "description": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p><p>&nbsp;</p><p><strong>&nbsp;</strong></p><hr /><p><strong><br />Input Guide :</br></strong>Insert you answer(which will be array) in the first line insert size of array and in second line insert array in a line as space separated values  like :  <strong> <br>8 <br>1 3 4 0 8 9 7 6 4</strong><br></p></p><p><strong><br><hr>Example 1:</strong></p><strong><br />Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]<strong><br />Output:</strong> 6<strong><br />Explanation:</strong>array [0,1,0,2,1,0,1,3,2,1,2,1]. <br>In this case, 6 units of rain water are being trapped.<p><strong>&nbsp;</strong></p><hr /><p><strong>Example 2:</strong></p><strong><br />Input:</strong> height = [4,2,0,3,2,5]<strong><br />Output:</strong> 9<p>&nbsp;</p><p><strong>&nbsp;</strong></p><hr /><p><strong>Constraints:</strong></p><ul><li><code>n == height.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li><li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li></ul>",
  "wrongcodefile": "2wrongcode.cpp",
  "rightcodefile": "2rightcode.cpp",
  "wrongcode": "\n#include<iostream>\n#include<stack>\n#include<vector>\n#include<cstring>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int trap(vector<int>& h) {\n        stack<int>s;\n        int n=h.size();\n        vector<int>t(h.size(),-1);\n        for(int i=0;i<n;i++){\n            if(s.empty()){\n                s.push(i);\n            }\n            else{\n                if(h[i]>=h[s.top()]){\n                    while((!s.empty())&&h[i]>=h[s.top()]){\n                        t[s.top()]=i;\n                        s.pop();\n                    }\n                }\n                s.push(i);\n            }\n        }\n        while(!s.empty()){\n            t[s.top()]=-1;\n            s.pop();\n        }\n        int maxm=-1;\n        int curr=0;\n        for(int i=0;i<n;i++){\n            int j=i+1;\n            for(;j<t[i];j++){\n                curr+=abs(h[i]-h[j]);\n            }\n            i=j-1;\n        }\n        return curr;\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    vector<int>v;\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        v.push_back(k);\n    }\n    cout<<ob.trap(v);\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d01"
  },
  "questionid": "3",
  "difficulty": "Hard",
  "description": "<p>Given an unsorted integer array&nbsp;<code>nums</code>, return the smallest missing positive integer.</p><br/><p>You must implement an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and uses constant extra space.</p><br/><br/><hr><p><strong>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separated values  like <strong><br > 4 <br> 1 6 8 4</strong> <br><br></p> <hr><p><strong>Example 1:</strong></p><strong>Input:</strong> nums = [1,2,0]<br/><strong>Output:</strong> 3<br/><strong>Explanation:</strong> The numbers in the range [1,2] are all in the array.<br/><hr><p><strong ></br>Example 2:</strong></p><strong>Input:</strong> nums = [3,4,-1,1]<br/><strong>Output:</strong> 2<br/><strong>Explanation:</strong> 1 is in the array but 2 is missing.<br/><hr><p><strong></br>Example 3:</strong></p><strong>Input:</strong> nums = [7,8,9,11,12]<br/><strong>Output:</strong> 1<br/><strong>Explanation:</strong> The smallest positive integer 1 is missing.<br/><p>&nbsp;</p><hr><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li><li><code>-2<sup>31</sup>&nbsp;&lt;= nums[i] &lt;= 2<sup>31</sup>&nbsp;- 1</code></li><br/></ul>",
  "wrongcodefile": "3wrongcode.cpp",
  "rightcodefile": "3rightcode.cpp",
  "wrongcode": "\n#include<iostream>\n#include<stack>\n#include<vector>\n\nusing namespace std;\nclass Solution {\n public:\n    int firstMissingPositive(vector<int> &nums) {\n       int n=nums.size();\n        for(int i=0 ; i<n-1 ; i++){\n           while(nums[i]>0 and nums[i] <= n and nums[i] != nums[nums[i]-1]){\n                swap(nums[i],nums[nums[i]-1]);\n             }\n        }\n\n        for(int i=0 ; i<n ; i++) \n            if(nums[i] != i+1)\n                return i+1;\n\n        return n+1;\n   }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    vector<int>v;\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        v.push_back(k);\n    }\n\n    int ans = ob.firstMissingPositive(v);\n    cout<<ans<<endl;\n\n    return 0;\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d02"
  },
  "questionid": "4",
  "difficulty": "Medium",
  "description": "<p>Given an array<span>&nbsp;</span><code>nums</code><span>&nbsp;</span>with<span>&nbsp;</span><code>n</code><span>&nbsp;</span>objects colored red, white, or blue, sort them<span>&nbsp;</span><strong>in-place&nbsp;</strong>so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p><br/><p>We will use the integers<span>&nbsp;</span><code>0</code>,<span>&nbsp;</span><code>1</code>, and<span>&nbsp;</span><code>2</code><span>&nbsp;</span>to represent the color red, white, and blue, respectively.</p><br/><p>You must solve this problem without using the library's sort function.</p><br/><hr><p><strong>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separated values  like <strong><br > 4 <br> 1 6 8 4</strong> <br><br></p><hr><p><strong>Example 1:</strong></p><br/><strong>Input:</strong> nums = [2,0,2,1,1,0]<br/><strong>Output:</strong> [0,0,1,1,2,2]<br/><br/><hr><p><strong>Example 2:</strong></p><br/><strong>Input:</strong> nums = [2,0,1]<br/><strong>Output:</strong> [0,1,2]<br/><br/><hr><p><strong>Constraints:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 300</code></li><li><code>nums[i]</code><span>&nbsp;</span>is either<span>&nbsp;</span><code>0</code>,<span>&nbsp;</span><code>1</code>, or<span>&nbsp;</span><code>2</code>.</li></ul>",
  "wrongcodefile": "4wrongcode.cpp",
  "rightcodefile": "4rightcode.cpp",
  "wrongcode": "\n#include<iostream>\n#include<stack>\n#include<vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    void sortColors(vector<int> &nums) {\n        int low=0,mid = 0,high = nums.size()-1;\n        while(mid<=high)\n        {\n            if(nums[mid]==0)\n            {\n                swap(nums[low],nums[mid]);\n                low++;\n                mid++;\n            }\n            else\n            {\n                mid++;\n            }\n        }\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    vector<int>v;\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        v.push_back(k);\n    }\n    \n    ob.sortColors(v);\n    for(int i = 0;i < n;i++){\n        cout<<v[i]<<\" \";\n    }\n    cout<<endl;\n\n    return 0;\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d03"
  },
  "questionid": "5",
  "difficulty": "Hard",
  "description": "<p>Given an array of integers<span>&nbsp;</span><code>heights</code><span>&nbsp;</span>representing the histogram's bar height where the width of each bar is<span>&nbsp;</span><code>1</code>, return<span>&nbsp;</span><em>the area of the largest rectangle in the histogram</em>.</p></br><hr><p><strong>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separatwed values  like <strong><br > 4 <br> 1 6 8 4</strong> <br><br></p><hr><p><strong>Example 1:</strong></p></br><strong>Input:</strong> heights = [2,1,5,6,2,3]</br><strong>Output:</strong> 10</br></br><hr><p><strong>Example 2:</strong></p></br><strong>Input:</strong> heights = [2,4]</br><strong>Output:</strong> 4</br></br><hr><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li><li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li></br></ul>",
  "wrongcodefile": "5wrongcode.cpp",
  "rightcodefile": "5rightcode.cpp",
  "wrongcode": "\n#include<iostream>\n#include<stack>\n#include<vector>\n\nusing namespace std;\nclass Solution {\npublic:\n    int largestRectangleArea(vector<int> &heights) {\n        stack<int> st; \n        int res = 0; \n        int n = heights.size(); \n        \n        for(int i = 0;i<= n;i++) {\n            \n            while(!st.empty() && (i == n || heights[st.top()] == heights[i])){\n                int height = heights[st.top()];\n                st.pop(); \n                \n                int width; \n                \n                if(st.empty()) \n                    width = i; \n                else \n                    width = i - st.top() - 1; \n                \n                res = max(res, width * height); \n            }\n            \n            st.push(i); \n        }\n        return res;\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    vector<int>v;\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        v.push_back(k);\n    }\n    \n    int ans = ob.largestRectangleArea(v);\n    cout<<ans<<endl;\n\n    return 0;\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d04"
  },
  "questionid": "6",
  "difficulty": "Easy",
  "description": "<p>Given the<span>&nbsp;</span><code>head</code><span>&nbsp;</span>of a singly linked list, reverse the list, and return<span>&nbsp;</span><em>the reversed list</em>.</p><p>&nbsp;</p></br><hr><strong>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separated values  like <strong><br > 4 <br> 1 6 8 4</strong> <br></p></br></br><hr><p><strong>Example 1:</strong></p><strong>Input:</strong> head = [1,2,3,4,5]</br><strong>Output:</strong> [5,4,3,2,1]</br></br><p><strong>Example 2:</strong></p><strong>Input:</strong> head = [1,2]<strong></br>Output:</strong> [2,1]</br></br><p><strong>Example 3:</strong></p><strong>Input:</strong> head = []</br><strong>Output:</strong> []</br><p>&nbsp;</p></br><hr><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is the range<span>&nbsp;</span><code>[0, 5000]</code>.</li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></br></ul>",
  "wrongcodefile": "6wrongcode.cpp",
  "rightcodefile": "6rightcode.cpp",
  "wrongcode": "\n#include<iostream>\nusing namespace std;\n\nstruct ListNode{\n    public:\n        int val;\n        ListNode *next;\n        \n        ListNode(){\n            val = 0;\n            next = NULL;\n        }\n        ListNode(int x){\n            val = x;\n            next = NULL;\n        }\n        ListNode(int x, ListNode *nextNext){\n            val = x;\n            next = nextNext;\n        }\n};\n\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        ListNode* cur = head;\n        \n        while(cur){\n            ListNode* temp = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = temp;\n        }\n        \n        return prev->next;\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    \n    ListNode *dummy = new ListNode();\n    ListNode *store = dummy;\n\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        ListNode* temp = new ListNode(k);\n        store->next = temp;\n        store = store->next;\n    }\n    \n    ListNode* ans = ob.reverseList(dummy->next);\n    while(ans != NULL){\n        cout<<ans->val<<\" \";\n        ans = ans->next;\n    }\n    cout<<endl;\n\n    return 0;\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d05"
  },
  "questionid": "7",
  "difficulty": "Medium",
  "description": "<p>Given the<span>&nbsp;</span><code>head</code><span>&nbsp;</span>of a linked list, return<span>&nbsp;</span><em>the list after sorting it in<span>&nbsp;</span><strong>ascending order</strong></em>.</p></br><hr><strong>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separated values  like <strong><br > 4 <br> 1 6 8 4</strong> <br></p></br></br><hr><p><strong>Example 1:</strong></p></br><strong>Input:</strong> head = [4,2,1,3]</br><strong>Output:</strong> [1,2,3,4]</br><p></br><strong>Example 2:</strong></p></br><strong>Input:</strong> head = [-1,5,3,4,0]</br><strong>Output:</strong> [-1,0,3,4,5]</br><p></br><strong>Example 3:</strong></p></br><strong>Input:</strong> head = []</br><strong>Output:</strong> []</br><p>&nbsp;</p></br><hr><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is in the range<span>&nbsp;</span><code>[0, 5 * 10<sup>4</sup>]</code>.</li><li><code>-10<sup>5</sup><span>&nbsp;</span>&lt;= Node.val &lt;= 10<sup>5</sup></code></li></br></ul>",
  "wrongcodefile": "7wrongcode.cpp",
  "rightcodefile": "7rightcode.cpp",
  "wrongcode": "\n#include<iostream>\nusing namespace std;\n\nstruct ListNode{\n    public:\n        int val;\n        ListNode *next;\n        \n        ListNode(){\n            val = 0;\n            next = NULL;\n        }\n        ListNode(int x){\n            val = x;\n            next = NULL;\n        }\n        ListNode(int x, ListNode *nextNext){\n            val = x;\n            next = nextNext;\n        }\n};\n\n\nclass Solution {\nprivate:\n    ListNode* mergelist(ListNode *l1, ListNode *l2)\n    {\n        ListNode *ptr = new ListNode(0);\n        ListNode *curr = ptr;\n        \n        while(l1 != NULL && l2 != NULL)\n        {\n            if(l1->val <= l2->val)\n            {\n                curr -> next = l1;\n                l1 = l1 -> next;\n            }\n            else\n            {\n                curr -> next = l2;\n                l2 = l2 -> next;\n            }\n        \n        curr = curr ->next;\n        \n        }\n        \n        //for unqual length linked list\n        \n        if(l1 != NULL)\n        {\n            curr -> next = l1;\n            l1 = l1->next;\n        }\n        \n        if(l2 != NULL)\n        {\n            curr -> next = l2;\n            l2 = l2 ->next;\n        }\n        \n        return ptr->next;\n    }\npublic:\n    ListNode* sortList(ListNode* head) {\n        //If List Contain a Single or 0 Node\n        if(head == NULL || head ->next == NULL)\n            return head;\n        \n        \n        ListNode *temp = NULL;\n        ListNode *slow = head;\n        ListNode *fast = head;\n        \n        // 2 pointer appraoach / turtle-hare Algorithm (Finding the middle element)\n        while(fast !=  NULL && fast -> next != NULL)\n        {\n            temp = slow;\n            slow = slow->next;          //slow increment by 1\n            fast = fast ->next ->next;  //fast incremented by 2\n            \n        }   \n        temp -> next = NULL;            //end of first left half\n        \n        ListNode* l1 = sortList(head);    //left half recursive call\n        ListNode* l2 = sortList(slow);    //right half recursive call\n        \n        return mergelist(l1, l2->next);         //mergelist Function call\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    \n    ListNode *dummy = new ListNode();\n    ListNode *store = dummy;\n\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        ListNode* temp = new ListNode(k);\n        store->next = temp;\n        store = store->next;\n    }\n    \n    ListNode* ans = ob.sortList(dummy->next);\n    while(ans != NULL){\n        cout<<ans->val<<\" \";\n        ans = ans->next;\n    }\n    cout<<endl;\n\n    return 0;\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d06"
  },
  "questionid": "8",
  "difficulty": "Easy",
  "description": "<p>Given the<span>&nbsp;</span><code>head</code><span>&nbsp;</span>of a singly linked list, return<span>&nbsp;</span><code>true</code><em><span>&nbsp;</span>if it is a<span>&nbsp;</span></em><span><em>palindrome</em></span><em><span>&nbsp;</span>or<span>&nbsp;</span></em><code>false</code><em><span>&nbsp;</span>otherwise</em>.</p></br><hr><strong>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separated values  like <strong><br > 4 <br> 1 6 8 4</strong> <br></p></br></br><hr><p><strong>Example 1:</strong></p><strong>Input:</strong> head = [1,2,2,1]</br><strong>Output:</strong> true</br></br><p><strong>Example 2:</strong></p><strong>Input:</strong> head = [1,2]</br><strong>Output:</strong> false</br><p>&nbsp;</p><hr><p><strong>Constraints:</strong></p></br><ul><li>The number of nodes in the list is in the range<span>&nbsp;</span><code>[1, 10<sup>5</sup>]</code>.</li><li><code>0 &lt;= Node.val &lt;= 9</code></li></br></ul>",
  "wrongcodefile": "8wrongcode.cpp",
  "rightcodefile": "8rightcode.cpp",
  "wrongcode": "\n#include<iostream>\nusing namespace std;\n\nstruct ListNode{\n    public:\n        int val;\n        ListNode *next;\n        \n        ListNode(){\n            val = 0;\n            next = NULL;\n        }\n        ListNode(int x){\n            val = x;\n            next = NULL;\n        }\n        ListNode(int x, ListNode *nextNext){\n            val = x;\n            next = nextNext;\n        }\n};\n\n\nclass Solution {\nprivate:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* curr = head;\n        ListNode* prev = NULL;\n        while(curr != NULL )\n        {\n            ListNode* temp = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = temp;\n        }\n        return prev;\n    }\npublic:\n    bool isPalindrome(ListNode* head) {\n        if(head == NULL || head->next == NULL)\n            return true;\n        \n        ListNode* slow = head;\n        ListNode* fast = head;\n        while(fast != NULL && fast->next != NULL)\n        {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        \n        slow->next = reverseList(slow->next);\n        slow = slow->next;\n        \n        while(slow != NULL)\n        {\n            if(head->val != slow->val)\n                return false;\n            head = head->next;\n            slow = slow->next;\n        }\n        return true;\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    \n    ListNode *dummy = new ListNode();\n    ListNode *store = dummy;\n\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        ListNode* temp = new ListNode(k);\n        store->next = temp;\n        store = store->next;\n    }\n    \n    bool ans = ob.isPalindrome(dummy->next);\n    cout<<ans<<endl;\n\n    return 0;\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d07"
  },
  "questionid": "9",
  "difficulty": "Medium",
  "description": "<p>You are given the<span>&nbsp;</span><code>head</code><span>&nbsp;</span>of a linked list with<span>&nbsp;</span><code>n</code><span>&nbsp;</span>nodes.</p></br><p>For each node in the list, find the value of the<span>&nbsp;</span><strong>next greater node</strong>. That is, for each node, find the value of the first node that is next to it and has a<span>&nbsp;</span><strong>strictly larger</strong><span>&nbsp;</span>value than it.</p></br><p>Return an integer array<span>&nbsp;</span><code>answer</code><span>&nbsp;</span>where<span>&nbsp;</span><code>answer[i]</code><span>&nbsp;</span>is the value of the next greater node of the<span>&nbsp;</span><code>i<sup>th</sup></code><span>&nbsp;</span>node (<strong>1-indexed</strong>). If the<span>&nbsp;</span><code>i<sup>th</sup></code><span>&nbsp;</span>node does not have a next greater node, set<span>&nbsp;</span><code>answer[i] = 0</code>.</p></br><hr><strong>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separated values  like <strong><br > 4 <br> 1 6 8 4</strong> <br></p></br></br><hr><p><strong>Example 1:</strong></p><strong>Input:</strong> head = [2,1,5]</br><strong>Output:</strong> [5,5,0]</br><p></br><strong>Example 2:</strong></p><strong>Input:</strong> head = [2,7,4,3,5]</br><strong>Output:</strong> [7,0,5,5,0]</br><p>&nbsp;</p></br><hr><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is<span>&nbsp;</span><code>n</code>.</li><li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li><li><code>1 &lt;= Node.val &lt;= 10<sup>9</sup></code></li></br></ul>",
  "wrongcodefile": "9wrongcode.cpp",
  "rightcodefile": "9rightcode.cpp",
  "wrongcode": "\n#include<iostream>\n#include<stack>\n#include<vector>\nusing namespace std;\n\nstruct ListNode{\n    public:\n        int val;\n        ListNode *next;\n        \n        ListNode(){\n            val = 0;\n            next = NULL;\n        }\n        ListNode(int x){\n            val = x;\n            next = NULL;\n        }\n        ListNode(int x, ListNode *nextNext){\n            val = x;\n            next = nextNext;\n        }\n};\n\n\nclass Solution {\npublic:\n    vector<int> nextLargerNodes(ListNode* head) {\n        ListNode* temp = head;\n        vector<int> nums;\n        \n        while(temp != NULL){ \n            nums.push_back(temp->val);\n            temp = temp->next;\n        }\n        \n        vector<int> ans;\n        stack<int> st;\n        int n = nums.size();\n        \n        for(int i = n-1;i >= 0;i--){\n            while(!st.empty() && st.top() <= nums[i]){\n                st.pop();\n            }\n            \n            int res = (st.empty()) ? 0 : st.top();\n            ans.push_back(res);\n            st.push(nums[i]);\n        }\n        \n        return ans;\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    \n    ListNode *dummy = new ListNode();\n    ListNode *store = dummy;\n\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        ListNode* temp = new ListNode(k);\n        store->next = temp;\n        store = store->next;\n    }\n    \n    vector<int> ans = ob.nextLargerNodes(dummy->next);\n    for(int i =0;i < n;i++){\n        cout<<ans[i]<<\" \";\n    }\n    cout<<endl;\n\n    return 0;\n}"
},{
  "_id": {
    "$oid": "6388abc1e425877b82ce0d08"
  },
  "questionid": "10",
  "difficulty": "Medium",
  "description": "<p>Given the<span>&nbsp;</span><code>head</code><span>&nbsp;</span>of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return<span>&nbsp;</span><em>the reordered list</em>.</p></br><p>The<span>&nbsp;</span><strong>first</strong><span>&nbsp;</span>node is considered<span>&nbsp;</span><strong>odd</strong>, and the<span>&nbsp;</span><strong>second</strong><span>&nbsp;</span>node is<span>&nbsp;</span><strong>even</strong>, and so on.</p></br><p>Note that the relative order inside both the even and odd groups should remain as it was in the input.</p></br><p>You must solve the problem&nbsp;in<span>&nbsp;</span><code>O(1)</code>&nbsp;extra space complexity and<span>&nbsp;</span><code>O(n)</code><span>&nbsp;</span>time complexity.</p> </br><hr><strong>Input Guide :</strong><br> Insert you answer (which will be array )in the first line we have to insert length of array and in next line insert array as space separated values  like <strong><br > 4 <br> 1 6 8 4</strong> <br></p><br><hr> <p><strong>Example 1:</strong></p><strong>Input:</strong> head = [1,2,3,4,5]</br><strong>Output:</strong> [1,3,5,2,4]</br></br><p><strong>Example 2:</strong></p><strong>Input:</strong> head = [2,1,3,5,6,4,7]</br><strong>Output:</strong> [2,3,6,7,1,5,4]</br><p>&nbsp;</p></br><hr><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the linked list is in the range<span>&nbsp;</span><code>[0, 10<sup>4</sup>]</code>.</li><li><code>-10<sup>6</sup><span>&nbsp;</span>&lt;= Node.val &lt;= 10<sup>6</sup></code></li></br></ul>",
  "wrongcodefile": "10wrongcode.cpp",
  "rightcodefile": "10rightcode.cpp",
  "wrongcode": "\n#include<iostream>\nusing namespace std;\n\nstruct ListNode{\n    public:\n        int val;\n        ListNode *next;\n        \n        ListNode(){\n            val = 0;\n            next = NULL;\n        }\n        ListNode(int x){\n            val = x;\n            next = NULL;\n        }\n        ListNode(int x, ListNode *nextNext){\n            val = x;\n            next = nextNext;\n        }\n};\n\n\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n        if(!head) return head;\n        \n        ListNode *odd = head, *evenhead = head->next, *even = evenhead;\n        \n        while(even && even->next){\n            odd->next = odd->next->next;\n            even->next = even->next->next;\n            odd = odd->next;\n            even = even->next;\n        }\n        \n        return head;\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    \n    ListNode *dummy = new ListNode();\n    ListNode *store = dummy;\n\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        ListNode* temp = new ListNode(k);\n        store->next = temp;\n        store = store->next;\n    }\n    \n    ListNode* ans = ob.oddEvenList(dummy->next);\n    while(ans != NULL){\n        cout<<ans->val<<\" \";\n        ans = ans->next;\n    }\n    cout<<endl;\n\n    return 0;\n}"
}]